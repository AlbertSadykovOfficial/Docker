

		Как создаются образы

				docker build

				Контекст создания образа

						Для команды создания образа необходим контекст созданя образа, который
						представляет собой набор локальных файлов и каталогов к которым можно
						обращаться из инструкции ADD и/или COPY Dockerfile.

								Пример:

										docker build -t test/cowsay-dockerfile .

										"." - всей файлы текущего каталога.

						В случаях, когда котекст не определен - контекст создания считается пустым.
						Если задан URL, начинающийся с http или https, предполагается, что это прямая
						ссылка на Dockerfle.

						В качестве контекста разрешается указывать git репозиторий, 
						в таком случае будет произведено его клонирование и клонирование его модулей
						во временном каталоге, который затем передастся в демон Docker как контекст
						создания образа

						Контекст спопсобен принимать данные из сандартного потока ввода SDIN, если
						в команде указать аргумент "-" всесто контекста создания образа.
						Входными данными может быть либо Dockerfile без контекста

								Пример: 
									docker build - < Dockerfile  

						либо архивный файл, создержащий контекст в том числе и Dоckerfile,
						при этом архивный файл дожен передаватся в фаормате tar.gz, xz или bzip:

								docker build - < context.tar.gz

						Для удаления ненужных файлов из контекста можно вопользоваться .dockerignore,
						который поддерживает нативный функционал (* и ?)


				Уровни образа

						Посмотреть:

								docker history

						Если создание образа завершилось неудачно, то можно запустиь уровень, предшестующий ошибке.
						Для отладки ошибочной инструкции можно использовать идекнтификатор последнего образа
						К примеру мы запустили контейнер, обратились к bash, а он оказался не запущен -> это можно
						выявить.

								docker run -it <IMAGE_ID> 


				Кэширование

						Для создания образа Docker применяет кэширование каждого уровня, что увеличивает скорость,
						но это не всегда целесообразн.

						Стоить помнить о кэше, когда используется команда apt-get update или клонирование репозиториев.

						Чтобы запретить кэширование, можно выполнить команду (docker build --no-cache). Так же можно
						добавить или изменить инструкцию перед стройо в который необходимо запретить кэширование в
						файле Docker (но такой способ может запутать):

								ENV UPDATED_ON "14:12 3 April 2021"
								RUN git clone...


				Базовые образы

						При создании своих образов необходимо выбрать один из базовых образов в качестве отправного
						пункта - стоит потратиить на это время.

						Ксли нужен образ для управления собственным приложением, потребуется сначала поискать
						базовый образ для используемого языка программирования (Go, Ruby on Rails)

						Существуют как полные дистрибутивы Linux , так и облегченные (alpine - 5MB).

						Размер образа можно уменьшить до предельной величины, формируя образы только из бинарных файлов,
						для этого необходим Dockerfile из спец образа scratch (абсолютно пустая файловая система).
						Для бинарных файлов следует включить в образ все требуемые библиотеки и исклчить возможность
						вызрва внешних команд.

						Несмотря на преимуществка в скорости, следует отметить, что отладка усложняется, в образах
						scratch не оустпна даже командная строка.


				Инструкции Dockerfile:

						FROM - определяет основной образ для файла Dockerfile В формате IMAGE:TAG (ОБЯЗАТЕЛЕН)
						ADD - копирует файлы из контекста создания или удаленных URL в образ.
						CMD - запускает заданную инструкцию во время выполнения контейнера.
						COPY - копирует файлы из контекста создания в образ. 
									 Существует в 2х форматах COPY источник цель и COPY ["источник", "цель"]
									 Формат JSON обязателен, если путь содредит пробелы.
						ENTRYPOINT - ОПРЕДЕЛЯЕТ ВЫПОЛНЯЕМЫЙ ФАЙЛ.
						ENV - Определяет переменные среды внутри образа, на ти переменные можно сслыаться
									внутри образа.
						EXPOSE - сообщает что в контейнере будет существаать процесс, прослушивающий заданный порт
										или несколько портов.
						MAINTAINER - ИСПОЛНИТЕЛЬ
						ONBUILD - опреедляет инструкцию, когда анный образ будет использоваться дргуим образом как основной.
						RUN - запускает заданную инструкцию внутри контейнера
						USER - задает польователя (по имени или UID). При этом UID одинаковы на хосте и контейнере, но имена
									 могу отличаться.

						VOLUME - объединяет заданный файл как каталог или том.
						WORKDIR - определяет рабочий каталог для всех послежующих инструкций RUN, CMD, ENTRYPOINT, ADD, COPY/ 


						Стоит учивать, что после интрукции VOLUME не произойдет никаких изменений в томе, 
						так что следует писать комады, связанные с томом до этой инструкции.
						Это связано с тем, что команды будут запускаться в томе временного контейнера 
						(вспоминай основной механизм работы), используемого для создания соответствующего уровня
						Данный том будет удален после перечисленных команд, поэтому и надо пистадь ДО инструкции:

								RUN mkdir /data && touch /data/x
								RUN chown -R foo:foo /data
								VOLUME /data




