

		Архитектура

				Основные компоненты рабочего Docker-котейнера:

						Хост - (Демон + сонтейнеры и образы) - создание, запуск контроль работы контейнеров
									  и образов
						Клиент - Общается с Демоном Docker через HTTP, что позволяет легко наладить связь
										 не только с локальным, но и с удаленным демоном Docker
						Реестры - Используются для хранения и распространения образов


				Базовые технологии

						Демон использует "драйвер выполнения" для создания контейнеров.
						По умолчанию используется собственный драйвер runc, но можно и олее старые для LXC.

						Драйвер runc связан со следующими механизмами ядра:
								cgroups - управление ресурсами контейера(проц, ОЗУ и т.д.)
													Выполнение операций замораживания и размораживания (docker pause)

								namespaces - изоляция контейнеров - гарантирует, что файловая система, мя хоста,
														 пользователи, сетевая среда и процессы отделены от остальной системы.

						UnionFS - ФС с каскадно-объединенным монтированием, которая обеспечивает 
											храненеие уровней для контейнеров.
											Ее работу обеспечивает один из драйверов:
											AUFS, devicemapper, BTRFS или Overlay


				Сопровождающие технологии (ополнительные)

						Благодаря модульности и философии "заменяемых батареек", можно заменять компоненты
						по умолчанию на сторонние компоненты.

						Примеры:

								Swarm - решение задачи кластеризации от Docker (много хостов как 1 ресурс)
								Docker Compose - содание и выполнение приложений, скомпонованных из нескольких
																 контейнеров.
								Docker Machine - устанавливает и конфигуррует Docker-хосты на локальных и
																 удлаленных ресурсах + клиент Docker/
								Kitematic - графический интерфейс для Mac OS и Windows для запуска и управления
														Docker.
								Docker Trusted Registry - локальная версия Docker Hub.

						Примеры от 3х сторон:

								Сетевая среда - создание контейнеров, распределенных между разными хостами.
																(Пример: Weave, Project Calico)

								Обнаружение сервисов - поиск сервисов для взаимодействия с ними (которые 
																			 обычно тоже раотают в котейнерах)
																			 (Пример: Consul, Registrator, SkyDNS, etcd

								Оркестровка и управление кластером - решает проблемы сложного управления
																										 большого кол-ва узлов.
																				(Пример: Kubernees, Marathon, Docker Swarm)
