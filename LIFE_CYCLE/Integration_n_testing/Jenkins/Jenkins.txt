

		Создание контейнера для сервера Jenkins


				Jenkins - сервер непрерывной интеграции.

				Цель: Настроить Jenkons таким образом, чтобы при любых изменениях в проекте 
							identidock он автоматически проверял внесенные изменения, создавал 
							новые образы и выполнял для них определенные операции тестирования,
							включая модульные тесты и полные тесты системыю

			1.Чтобы Jenkins мог формировать образы, необходимо использовать Docker-сокет 
				внутри контейнера, что позовлит создавать образы-братья того же уровня 
				(1-Ведущий, много ведомых)
				
				{ 
					Docker-сокет - точка входа для обмена данными между клиентом и демоном. 
					По умолчанию: IPC-сокет (var/run/docker.sock), но можно и TCP.
				}

			2. Docker-in-Docker(DinD) - Docker конетйнер создает собственные контейнеры потомки 
				 (получается как бинарное дерево)
				 Представляет собой обычый запуск механизма Docker внутри контейнра.

				 Главное отличик DinD от сокетов - контейнеры внутри полностью изолирваны от
				 контейнеров хоста, поэтому при выполнении docker ps будут показаны только контейнеры,
				 созданные демоном DinD Docker. При монтировании сокета docker ps покажет все 
				 контейнеры.

		Реализация:
			
				Чтобы смонтировать сокет с хоста, необходимо убедиться, что пользователь сервера
				Jenkins ВНУТРИ контейнера обладает необходимыми правами доступа. 
				
				(Создадим Dockerfile в каталоге identijenk)

					 1) В Dockerfile скачивается основной образ Jenkins
					 2) Устанавливает бинарный файл docker
					 3) Добавляет права выполнения sudo-команд без указания пароля для пользоватля jenkins

					 Почему не следует использовать группу docker для пользователя:
					 (Пользователь jenkins не добавлен в группу пользователей Docker, поэтому все послежующие
					  крманды Docker будут выполняся из под sudo. Если бы мы внесли пользователя в группу,
					  то на хосте интеграции использовался бы его GID группы docker, а так же вносилось бы
					  фиксированное значение GID в Dockerfile, что лишает свойства пеерносимости, т.к. значения
					  группы GID скорее всего будут отличаться на разных хостах).

				Создать образ и проверить работоспособность:

						docker build -t identijenk .

						# Монтируем Docker-сокет для установления соединения с демоном Docker.
						docker run -v /var/run/docker.sock:/var/run/docker.sock identijenk sudo docker ps


				Теперь, получив механизм Docker, работающий внутри конетйнера, моно утсанавливать другой
				компоект ПО, еобходимый для обеспечения созания образов на сервере Jenkins.
				Следует изменить Dockerfile и добавить несколько команд:

						1) Установить Compose для автоматического создания и запуска образов

						RUN curl -L https://github.com/docker/compose/releases/download/1.4.1/\
								docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose; \
								    chmod +x /usr/local/bin/docker-compose

						2) Подключние файла со списками доп модулей для установки на сервере Jenkins

						COPY plugins.txt /usr/share/jenkins/plugins.txt


						В plugins.txt подключены следующие модули:

								1) Первые три для настройи интерфейса в репозитории.
								2) Модуль greenballs изменяет синие значки завершения процесса на зеленые

				Для постоянного хранения параметров онфигурации слеует создать контейнер данных:

						docker build -t identijenk .
						docker run --name jenkins-data identijenk echo "Jenkins Data Container"

				Пока созданный контейнер не удален, его можно использовать, указывая аргумент
				--volumes-from. После этого контейнер Jenkins готов к запуску:

						docker run -d --name jenkins -p 8080:8080 --volume-from jenkins-data \
											 -v /var/run/docker.sock:/var/run/docker.sock identijenk

				Теперь можно зайти по адресу http://localhost:8080, чтобы увидеть инициализацию
				сервера Jenkins.

				docker-compose.yml инициализирует верисю для разработки, нам нужно настроить
				версию для эксплуатации сос всем набором тестов, для этого содадим файл
				jenkins.yml, который будет запускать эксплуатационную версию identidock внутри
				контейнера jenkins.

						Параметры:

								1) expose - включена в целях документации, так как наш сервер располагается
									 в соседнем контейнере и не нужно объявлять открытуе потрыт на хосте.
								2) Установку среды как предназанченной для эксплуатации

				Код нужно обавть в репозиторий из которого будет извлекать исходники сервер Jenkins.
				К примеру, можно использовать GitHub.

				В целом Jenkins готов к началу процедуры конфигурирования и сборки образов.
				Теперь следует перейти на http://localhost:8080 и выполнить следующее:

					1) Creaete new jobs (новое задание)
					2) Item name (имя элемента) -> вводим identidock -> Freestyle project -> Ok
					3) Настроить Source Code Management. -> Выбрать Git -> Ввести URL репозитория
					4) Add builf step -> Execute shell -> Ввести в Command содержимое файла jenkins_shell
						 (Там используется учетка sudo, docker inspect для определения IP коонтейнера identidock,
						  curl - доступ к identidock, при жтом проверяют код возврата 200)