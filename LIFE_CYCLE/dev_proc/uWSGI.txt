

		uWSGI


				uWSGI - сервер приложений, который может работать в связке
								с обычным веб-сервером, таким как nginx.

				Использование uWSGI вместо сервера Flask предоставляет контейнер
				с весьма гибкими свйоствами. Для перехода на сервер uWSGI следует
				исправить нескольок строчек в Dockerfile

				Добавим в Dockerfile:

				RUN pip install Flask==0.10.1 uWSGI==2.0.8
				CMD ["uwsgi", "--http", "0.0.0.0:9090", "--wsgi-file", "/app/identidock.py", "--callable", "app", "--stats", "0.0.0.0:9191"]

				Команда CMD щапустит http-сервер, прослушивающий 9090 порт и
				инициализировать приложение app из файла app/identidock.py
				Также инициализируется сервер состояний с прослушиваие порта
				9191. Можно сделать это и через run.

				Запустим образ, чтобы постотреть различия:

						docker build -t identidock .
							...
						docker run -d -p 9090:9090 -p 9191:9191 identidock
						curl localhost:9090

						(Если использовтаь комнду docker logs, то можно увидеть,
						 что ипользуется именно uWSGI)


				Так же ели проанализировать журналы, то можно заметить, что 
				используется учетная запись root, ЧТО не безопасно, следует
				ее измеить в Dockerfile:

						RUN groupadd -r uwsgi & useradd -r -g uwsgi uwsgi # Создать пользователя
						 	...
					 	EXPOSE 9090 9191 # объявление портов доступных хосту и др. контейнерам
					 	USER uwsgi # Определение имени пользователя для последующих строк.


				Есть побочный эффект, связанный с пользователями и группами.
				Так, пользователи и группы, соданные в контейнере не передаются на хост,
				что может вызвать путаницу с правами доступа.


						После всех конфигураций можно проверить конфигурацию с новым пользователем:

								docker build -t identidock
								docker run identidock whoami

				Теперь команды не запускабтся от root пользователя


				Автоматиеское назначение портов

						docker run -d -P --name port-test identidock
						docker port port-test
						 ... СВЕДЕНИЯ О ПОРТАХ

						 Подключаемся:
						curl localhost:<PORT>


				Чтобы использовать несколько режимов эксплуатации: разработки и эксплуатационный,
				можно воспользоваться переменными среды, чтобы программно выбирать комплект возможностей.

						(файл cmd.sh в том же каталоге, что и Dockerfile)

						Команда Exec нужна, чтобы не порождать новый процесс и обеспечивать получение
						и обработку любых сигналов единственным процессом uwsgi, а не избыочнм родительским.

						Чтобы скрипт заработал, необходимо отредактировать Dockerfile:

								COPY cmd.sh / # Добавление скрипат в контейнер
								CMD ["/cmd.sh"] # Вызов скрипта из инструкции


						Чтобы проверить новую версию, следует останивить ранее запущенные контейнеры:

								sudo docker stop $(sudo docker ps -q)
								sudo docker rm $(sudo docker ps -aq)

						Теперь можно создать новый образ со скриптом выбора режима работы

								chmod +x cmd.sh
								docer build -t identiblock
									...
								docker run -e "ENV=DEV" -p 5000:5000 identidock

